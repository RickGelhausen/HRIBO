#!/usr/bin/env python
'''This script takes input files generated by
reparation and creates a new data frame containing specified
information and writes it as gff3 format files.
'''

import pandas as pd
import re
import argparse
import numpy as np
import os
import csv


def toGFF(args):
    # ['ORF_locus', 'strand', 'length', 'start_codon', 'ribo_count', 'ribo_rpkm', 'ribo_coverage', 'SD_score', 'SD_pos', 'prob', 'ORF_type', 'Reference', 'Distance_from_aTIS']
    inputDF = pd.read_csv(args.predictedORFs, sep='\t', header=0)
    prefix = os.path.basename(args.outputGFF).split(".")[0]

    ## seqID | source | type | start | end | score | strand | phase | attribute
    # Creation of dataframe in gff3 format
    gff3DF = pd.DataFrame()
    tmpDF = pd.DataFrame()
    # Creating a unique gene_id
    tmpDF["gene_id"] = np.arange(inputDF.shape[0])
    gff3DF["seqID"], tmpDF["range"] = inputDF["ORF_locus"].str.split(":").str
    gff3DF["source"] = "reparation" #args.source
    gff3DF["type"] = "CDS"
    gff3DF["start"], gff3DF["end"] = tmpDF["range"].str.split("-").str
    gff3DF["score"] = "."
    gff3DF["strand"] = inputDF["strand"]
    gff3DF["phase"] = "."
    gff3DF["attribute"] = "gene_id \"RP-%s-"%(prefix)+ tmpDF["gene_id"].astype(str)  \
                        + "\"; Name \"" + inputDF["Reference"].astype(str) \
                        + "\"; start_codon \"" + inputDF["start_codon"] \
                        + "\"; ribo_count \"" + inputDF["ribo_count"].astype(str) \
                        + "\"; ribo_rpkm \"" + inputDF["ribo_rpkm"].astype(str) \
                        + "\"; ribo_coverage \"" + inputDF["ribo_coverage"].astype(str) \
                        + "\"; SD_score \"" + inputDF["SD_score"].astype(str) \
                        + "\"; SD_pos \"" + inputDF["SD_pos"].astype(str) \
                        + "\"; prob \"" + inputDF["prob"].astype(str) \
                        + "\"; ORF_type \"" + inputDF["ORF_type"] \
                        + "\"; Distance_from_aTIS \"" + inputDF["Distance_from_aTIS"].astype(str) + "\""

    ### Handling output
    # Append results
    with open(args.outputGFF, 'w') as f:
        gff3DF.to_csv(f, sep="\t", header=False, index=False, quoting=csv.QUOTE_NONE)

def main():
    # store commandline args
    parser = argparse.ArgumentParser(description='Converts reperation output to new data frame\
                                     containing specified information and saves it in gff3 format.')
    parser.add_argument("-i", "--inputTXT", action="store", dest="predictedORFs", required=True
                                          , help= "the input file. (created by reparation)")
    parser.add_argument("-o", "--outputGFF", action="store", dest="outputGFF", required=True
                                           , help= "the output file name (gff3 format)")

    args = parser.parse_args()
    gffoutput = toGFF(args)


if __name__ == '__main__':
    main()
